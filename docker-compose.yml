services:
  mcp-rfp-server:
    build: .
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      # Core application volumes - always mounted
      - ./src:/app/src
      - ./outputs:/app/outputs
      - ./chroma_data:/app/chroma_data
      - ./scripts:/app/scripts
      - ./token.json:/app/token.json

      # --- Volumes for Google Drive Authentication ---
      # Mounting the credentials file (read-only for security)
      - ./credentials.json:/app/credentials.json:ro
      # Mount the token file to persist login across restarts
      - ./token.json:/app/token.json
      # -----------------------------------------------

    environment:
      # Core Configuration - Required
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SERVER_NAME=mcp-rfp-server
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}

      # Knowledge Source Configuration - "local", "sharepoint", or "gdrive"
      - KNOWLEDGE_SOURCE=${KNOWLEDGE_SOURCE:-gdrive}

      # SharePoint Configuration - Required when KNOWLEDGE_SOURCE=sharepoint
      - SHAREPOINT_TENANT_ID=${SHAREPOINT_TENANT_ID}
      - SHAREPOINT_CLIENT_ID=${SHAREPOINT_CLIENT_ID}
      - SHAREPOINT_CLIENT_SECRET=${SHAREPOINT_CLIENT_SECRET}
      - SHAREPOINT_SITE_URL=${SHAREPOINT_SITE_URL}
      - SHAREPOINT_FOLDER_PATH=${SHAREPOINT_FOLDER_PATH:-knowledge_base}

      # --- Google Drive Configuration - Required when KNOWLEDGE_SOURCE=gdrive ---
      - GDRIVE_KNOWLEDGE_BASE_FOLDER_ID=${GDRIVE_KNOWLEDGE_BASE_FOLDER_ID}
      # -------------------------------------------------------------------------

      # AI and Processing Configuration
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-1.5-flash-latest}
      - SPACY_MODEL=${SPACY_MODEL:-en_core_web_sm}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}

      # Data Storage Paths (these are paths inside the container)
      - CHROMA_DB_PATH=/app/chroma_data
      - OUTPUT_PATH=/app/outputs
      - KNOWLEDGE_BASE_PATH=/app/knowledge_base

      # Processing Limits
      - MAX_DOCUMENT_SIZE_MB=${MAX_DOCUMENT_SIZE_MB:-50}
      - MAX_REQUIREMENTS_PER_DOCUMENT=${MAX_REQUIREMENTS_PER_DOCUMENT:-200}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
      - MAX_SEARCH_RESULTS=${MAX_SEARCH_RESULTS:-50}

    networks:
      - rfp-network

    healthcheck:
      test: |
        python -c "
        import socket
        import os
        # Test server port
        s = socket.socket()
        s.connect(('localhost', 8000))
        s.close()
        # Log current knowledge source
        print(f'Health check passed - Knowledge source: {os.environ.get(\"KNOWLEDGE_SOURCE\", \"local\")}')
        "
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    # --------------------------

    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

networks:
  rfp-network:
    driver: bridge